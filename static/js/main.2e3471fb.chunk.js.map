{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","socket","io","path","state","connected","connected_string","stocks","exchanges","name_tricker","exchange_total_volume","this","socketStocks","socketExchanges","activate","on","buy_data","handleSocketBuy","data","stock_dict","key","ticker","volume","total","setState","sell_data","handleSocketSell","update_data","handleSocketUpdate","value","Number","toFixed","time","timeConverter","push","price","emit","once","exchange_data","handleSocketExchange","exchange_dict","exchange","stock_data","handleSocketStocks","map","company_name","country","quote_base","name_ticker_dict","socketBuy","socketSell","socketUpdate","disconnect","connect","prevState","buy","translate","forEach","company","sell","length","total_volume","UNIX_timestamp","a","Date","month","getMonth","getDate","getHours","getMinutes","getSeconds","x","toString","replace","className","rel","href","integrity","crossorigin","onClick","connectedState","class","scope","Object","keys","index","numberWithCommas","exchangeBuyVolume","exchangeSellVolume","exchangeTotalVolume","exchangeMarketShare","exchangeShareAmount","join","width","height","margin","top","right","bottom","left","type","dataKey","stroke","activeDot","r","strokeDasharray","tick","fontSize","domain","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e3471fb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport io from 'socket.io-client'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.socket = io('wss://le-18262636.bitzonte.com',{path:'/stocks'});\n\n    this.state = {\n      connected: true,\n      connected_string: 'Disconnect',\n      stocks:{},\n      exchanges: {},\n      name_tricker: {},\n      exchange_total_volume: 0\n    };\n  }\n\n  activate(){\n\n    this.socketStocks()\n    this.socketExchanges()\n\n  }\n\n  componentDidMount(){\n    this.activate()\n  }\n\n  socketBuy(){\n    this.socket.on('BUY', (buy_data) => this.handleSocketBuy(buy_data));\n    \n  }\n\n  handleSocketBuy(data){\n    var stock_dict = {...this.state.stocks}\n\n    const key = data.ticker\n\n    stock_dict[key][\"buy_volume\"] += data.volume\n    stock_dict[key][\"total_volume\"] += data.volume\n\n    var total = this.state.exchange_total_volume + data.volume\n    this.setState({exchange_total_volume:total})\n\n    this.setState({stocks:stock_dict})\n\n  }\n\n  handleSocketSell(data){\n    var stock_dict = {...this.state.stocks}\n\n    const key = data.ticker\n\n    stock_dict[key][\"sell_volume\"] += data.volume\n    stock_dict[key][\"total_volume\"] += data.volume\n\n    var total = this.state.exchange_total_volume + data.volume\n    this.setState({exchange_total_volume:total})\n\n    this.setState({stocks:stock_dict})\n\n  }\n\n  socketSell(){\n    this.socket.on('SELL', (sell_data) => this.handleSocketSell(sell_data));\n\n  }\n\n  socketUpdate(){\n    this.socket.on('UPDATE', (update_data) => this.handleSocketUpdate(update_data));\n\n  }\n\n  handleSocketUpdate(data){\n\n    const key = data.ticker\n    var stock_dict = {...this.state.stocks}\n\n    if (stock_dict[key][\"historic_higher\"] < data.value) {\n      stock_dict[key][\"historic_higher\"] = data.value\n    }\n    if (stock_dict[key][\"historic_lower\"] === 0){\n      stock_dict[key][\"historic_lower\"] = data.value\n    }\n\n    if (stock_dict[key][\"historic_lower\"] > data.value) {\n      stock_dict[key][\"historic_lower\"] = data.value\n    }\n    stock_dict[key][\"variation\"] =  Number(((stock_dict[key][\"last_price\"] - data.value)/data.value) * 100).toFixed(3)\n\n    stock_dict[key][\"last_price\"] = data.value\n    var time = this.timeConverter(data.time)\n    stock_dict[key][\"chart_info\"].push({price :data.value,'time':time})\n\n    this.setState({stocks:stock_dict})\n\n\n  }\n\n  socketExchanges(){\n    this.socket.emit('EXCHANGES')\n    this.socket.once('EXCHANGES', (exchange_data) => this.handleSocketExchange(exchange_data));\n\n  }\n\n  handleSocketExchange(data){\n    var exchange_dict = {}\n\n    for(var exchange in data){\n      exchange_dict[exchange] = data[exchange]\n    }\n\n    this.setState({exchanges:exchange_dict})\n    \n  }\n  \n  socketStocks(){\n    this.socket.emit('STOCKS')\n    this.socket.once('STOCKS', (stock_data) => this.handleSocketStocks(stock_data))\n\n  }\n\n  handleSocketStocks(data){\n    var stock_dict = {...this.state.stocks}\n    data.map(stock_data=>\n      stock_dict[stock_data.ticker] = {\n        \"company_name\":stock_data.company_name,\n        \"country\": stock_data.country,\n        \"quote_base\":stock_data.quote_base,\n        \"buy_volume\":0,\n        \"sell_volume\":0,\n        \"total_volume\":0,\n        \"historic_higher\":0,\n        \"historic_lower\":0,\n        \"last_price\": 0,\n        \"variation\": 0,\n        \"chart_info\": []\n\n      }\n      )\n      this.setState({stocks:stock_dict})\n      var name_ticker_dict = {}\n\n      data.map(stock_data=>\n        name_ticker_dict[stock_data.company_name]=stock_data.ticker)\n\n      this.setState({name_tricker:name_ticker_dict})\n      \n      this.socketBuy()\n      this.socketSell()\n      this.socketUpdate()\n  }\n\n  connectedState(){\n    if(this.state.connected){\n        this.socket.disconnect();\n        this.setState({connected_string: 'Connect'})\n\n      }\n      else{\n        this.socket.connect();\n        this.setState({connected_string: 'Disconnect'})\n      }\n      this.setState(prevState=>({connected: !prevState.connected}))\n  }\n\n  exchangeBuyVolume(key){\n\n    //var result = {\"buy\":0,\"sell\":0,\"total\":0,\"length\":0, \"participation\":0}\n    var buy = 0\n    const exchange = this.state.exchanges\n    const stocks = this.state.stocks\n    const translate = this.state.name_tricker\n\n    var companies = exchange[key][\"listed_companies\"]\n    companies.forEach(company => \n      buy += stocks[translate[company]][\"buy_volume\"])    \n\n    return buy\n\n  }\n\n  exchangeSellVolume(key){\n\n    var sell = 0\n    const exchange = this.state.exchanges\n    const stocks = this.state.stocks\n    const translate = this.state.name_tricker\n\n    var companies = exchange[key][\"listed_companies\"]\n\n    companies.forEach(company => \n      sell += stocks[translate[company]][\"sell_volume\"])   \n\n    return sell\n\n  }\n\n  exchangeTotalVolume(key){\n\n    var total = 0\n    const exchange = this.state.exchanges\n    const stocks = this.state.stocks\n    const translate = this.state.name_tricker\n\n    var companies = exchange[key][\"listed_companies\"]\n\n    companies.forEach(company => \n      total += stocks[translate[company]][\"total_volume\"])   \n\n    return total\n\n  }\n\n\n  exchangeShareAmount(key){\n\n    const exchange = this.state.exchanges\n\n    var companies = exchange[key][\"listed_companies\"]\n\n    return companies.length\n\n  }\n\n\n  exchangeMarketShare(key,total_volume){\n\n    var total = 0\n    var market_share = 0\n    const exchange = this.state.exchanges\n    const stocks = this.state.stocks\n    const translate = this.state.name_tricker\n\n    var companies = exchange[key][\"listed_companies\"]\n\n    companies.forEach(company => \n      total += stocks[translate[company]][\"total_volume\"])   \n\n    market_share = Number((total/total_volume)*100).toFixed(3)\n\n\n    return market_share\n\n  }\n\n  timeConverter(UNIX_timestamp){ //from stackoverflow\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time = date + ' ' + month + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n  }\n  numberWithCommas(x) { //from stackoverflow\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n  render(){\n    const {stocks} = this.state\n    const {exchanges} = this.state\n    const total_volume = this.state.exchange_total_volume\n\n    return (\n      <div className=\"App\">\n        \n        <header className=\"App-header\">\n        <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n        integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n        crossorigin=\"anonymous\"\n        />\n        <div className=\"margin-div\">\n        <button onClick={()=>this.connectedState()}>{this.state.connected_string}</button>\n        </div>\n        <div className=\"margin-div\">\n        <h1>EXCHANGES</h1>\n        </div>\n        <table class=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">Ticker</th>\n            <th scope=\"col\">Exchange Name</th>\n            <th scope=\"col\">Country</th>\n            <th scope=\"col\">Address</th>\n            <th scope=\"col\">Buy Volume</th>\n            <th scope=\"col\">Sell Volume</th>\n            <th scope=\"col\">Total Volume</th>\n            <th scope=\"col\">Market Share</th>\n            <th scope=\"col\">Amount of Shares</th>\n\n\n          </tr>\n        </thead>\n        {Object.keys(exchanges).map((key,index)=>\n        <tbody>\n          <tr>\n            <td>{exchanges[key][\"exchange_ticker\"]}</td>\n            <td>{exchanges[key][\"name\"]}</td>\n            <td>{exchanges[key][\"country\"]}</td>\n            <td>{exchanges[key][\"address\"]}</td>\n            <td>{this.numberWithCommas(this.exchangeBuyVolume(key))}</td>\n            <td>{this.numberWithCommas(this.exchangeSellVolume(key))}</td>\n            <td>{this.numberWithCommas(this.exchangeTotalVolume(key))}</td>\n            <td>{this.numberWithCommas(this.exchangeMarketShare(key,total_volume))}%</td>\n            <td>{this.numberWithCommas(this.exchangeShareAmount(key))}</td>\n\n          </tr>\n      \n        </tbody>\n \n          )}\n\n      </table>\n      <div className=\"margin-div\">\n        <h1>EXCHANGES AND COMPANIES</h1>\n        <table class=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">Ticker</th>\n            <th scope=\"col\">Companies</th>\n\n          </tr>\n        </thead>\n        {Object.keys(exchanges).map((key,index)=>\n        <tbody>\n          <tr>\n          <td>{exchanges[key][\"exchange_ticker\"]}</td>\n            <td>{exchanges[key][\"listed_companies\"].join()}</td>\n\n          </tr>\n      \n        </tbody>\n \n          )}\n\n      </table>\n        </div>\n        <div className=\"margin-div\">\n        <h1>STOCKS</h1>\n        </div>\n        <table class=\"table\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">Ticker</th>\n            <th scope=\"col\">Company Name</th>\n            <th scope=\"col\">Country</th>\n            <th scope=\"col\">Quote Base</th>\n            <th scope=\"col\">Buy Volume</th>\n            <th scope=\"col\">Sell Volume</th>\n            <th scope=\"col\">Total Volume</th>\n            <th scope=\"col\">Historic Higher</th>\n            <th scope=\"col\">Historic Lower</th>\n            <th scope=\"col\">Last price</th>\n            <th scope=\"col\">% Variation</th>\n\n          </tr>\n        </thead>\n        {Object.keys(stocks).map((key,index)=>\n        <tbody>\n          <tr>\n            <td>{key}</td>\n            <td>{stocks[key][\"company_name\"]}</td>\n            <td>{stocks[key][\"country\"]}</td>\n            <td>{stocks[key][\"quote_base\"]}</td>\n            <td>{this.numberWithCommas(stocks[key][\"buy_volume\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"sell_volume\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"total_volume\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"historic_higher\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"historic_lower\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"last_price\"])}</td>\n            <td>{this.numberWithCommas(stocks[key][\"variation\"])}%</td>\n          </tr>\n      \n        </tbody>\n\n          )}\n\n      </table>\n      <h1>CHARTS</h1>\n      {Object.keys(stocks).map((key,index)=>\n\n\n        <div className=\"margin-div\">\n          <h4>{key} ({stocks[key][\"quote_base\"]})</h4>\n          <LineChart width={800} height={400} data={[...stocks[key][\"chart_info\"]]} margin={{ top: 5, right: 30, bottom: 5, left: 30 }}>\n          <Line type=\"monotone\" dataKey='price' stroke=\"#82ca9d\" activeDot={{ r: 8 }}/>\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"time\" tick={{fontSize: 10}}/>\n          <YAxis dataKey='price' tick={{fontSize: 10}} domain={[\"auto\", \"auto\"]}/>\n          <Tooltip />\n        </LineChart>\n        </div>\n      )}\n\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}